# Dockerfile for Webhook Server
# Separate from main API for security isolation

# ============================================================================
# Stage 1: Build Webhook Server
# ============================================================================
FROM rust:1.83-slim AS webhook-builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy workspace files
COPY Cargo.toml Cargo.lock ./
COPY backend/webhook-server ./backend/webhook-server

# Build the webhook server in release mode
RUN cargo build --release --bin blogger-webhook

# ============================================================================
# Stage 2: Webhook Runtime
# ============================================================================
FROM debian:bookworm-slim

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    git \
    docker.io \
    && rm -rf /var/lib/apt/lists/*

# Copy webhook binary
COPY --from=webhook-builder /app/target/release/blogger-webhook /app/blogger-webhook

# Copy deployment script
COPY scripts/deploy.sh /app/scripts/deploy.sh
RUN chmod +x /app/scripts/deploy.sh

# Create a user for running the webhook server
RUN useradd -m -u 1000 webhook

# Add webhook user to docker group for Docker socket access
RUN usermod -aG docker webhook || groupadd docker && usermod -aG docker webhook

# Note: User will be set to root in compose.yml for Docker socket access
# In production, consider using Docker Context or other secure alternatives

EXPOSE 9000

CMD ["/app/blogger-webhook"]
