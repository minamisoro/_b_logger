#!/usr/bin/env python3
"""
Interactive setup script for _B_logger
Prompts for configuration values and sets up the development environment
"""

import re
import subprocess
import sys
from pathlib import Path


def print_header(text):
    """Print a formatted header"""
    print(f"\n{'=' * 60}")
    print(f"  {text}")
    print(f"{'=' * 60}\n")


def prompt(question, default=None):
    """Prompt user for input with optional default"""
    if default:
        response = input(f"{question} [{default}]: ").strip()
        return response if response else default
    else:
        response = ""
        while not response:
            response = input(f"{question}: ").strip()
        return response


def prompt_yes_no(question, default=True):
    """Prompt user for yes/no question"""
    default_str = "Y/n" if default else "y/N"
    response = input(f"{question} [{default_str}]: ").strip().lower()

    if not response:
        return default
    return response in ('y', 'yes')


def validate_port(port_str):
    """Validate port number"""
    try:
        port = int(port_str)
        return 1 <= port <= 65535
    except ValueError:
        return False


def main():
    root_dir = Path(__file__).parent.parent
    config_path = root_dir / "config.toml"
    config_example_path = root_dir / "config.example.toml"

    print_header("_B_logger - Interactive Setup")

    # Check if config.toml already exists
    if config_path.exists():
        print(f"⚠️  config.toml already exists at {config_path}")
        if not prompt_yes_no("Do you want to overwrite it?", default=False):
            print("❌ Setup cancelled.")
            sys.exit(0)

    print("This script will help you set up your development environment.")
    print("Press Enter to use default values shown in brackets.\n")

    # Database configuration
    print_header("Database Configuration")
    print("PostgreSQL connection details:")

    db_user = prompt("Database username", "postgres")
    db_password = prompt("Database password", "postgres")
    db_host = prompt("Database host", "localhost")
    db_port = prompt("Database port", "5432")
    db_name = prompt("Database name", "blogger_db")

    database_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"

    # Server configuration
    print_header("Backend API Configuration")

    server_host = prompt("API server host", "127.0.0.1")
    server_port = prompt("API server port", "8080")
    while not validate_port(server_port):
        print("❌ Invalid port number. Must be between 1 and 65535.")
        server_port = prompt("API server port", "8080")

    # Frontend configuration
    print_header("Frontend Configuration")

    web_host = prompt("Web frontend host", "127.0.0.1")
    web_port = prompt("Web frontend port", "8081")
    while not validate_port(web_port):
        print("❌ Invalid port number. Must be between 1 and 65535.")
        web_port = prompt("Web frontend port", "8081")

    admin_host = prompt("Admin frontend host", "127.0.0.1")
    admin_port = prompt("Admin frontend port", "8082")
    while not validate_port(admin_port):
        print("❌ Invalid port number. Must be between 1 and 65535.")
        admin_port = prompt("Admin frontend port", "8082")

    # Generate config.toml
    print_header("Generating Configuration")

    config_content = f"""# _B_logger Configuration
# This configuration file is shared across all components of the blog platform
# Auto-generated by scripts/init.py

[database]
url = "{database_url}"

[server]
host = "{server_host}"
port = {server_port}

[frontend.web]
host = "{web_host}"
port = {web_port}

[frontend.admin]
host = "{admin_host}"
port = {admin_port}
"""

    config_path.write_text(config_content)
    print(f"✅ Created config.toml at {config_path}")

    # Run sync-config.py
    print("\n📝 Generating .env files from config.toml...")
    try:
        subprocess.run([sys.executable, str(root_dir / "scripts" / "sync-config.py")], check=True)
    except subprocess.CalledProcessError as e:
        print(f"❌ Failed to sync config: {e}")
        sys.exit(1)

    # Database setup
    print_header("Database Setup")

    if prompt_yes_no("Do you want to create the database now?", default=True):
        try:
            print(f"Creating database '{db_name}'...")
            subprocess.run(["createdb", db_name], check=True)
            print(f"✅ Database '{db_name}' created successfully")
        except subprocess.CalledProcessError:
            print(f"⚠️  Database '{db_name}' might already exist or createdb is not available")
            print("   You can create it manually with: createdb", db_name)
        except FileNotFoundError:
            print("❌ 'createdb' command not found. Please install PostgreSQL client tools.")
            print(f"   You can create the database manually with: createdb {db_name}")

    if prompt_yes_no("Do you want to run database migrations now?", default=True):
        try:
            print("Running database migrations...")
            subprocess.run(["diesel", "migration", "run"], cwd=root_dir, check=True)
            print("✅ Database migrations completed successfully")
        except subprocess.CalledProcessError as e:
            print(f"❌ Failed to run migrations: {e}")
            print("   You can run them manually later with: diesel migration run")
        except FileNotFoundError:
            print("❌ 'diesel' command not found. Please install diesel_cli:")
            print("   cargo install diesel_cli --no-default-features --features postgres")

    # Dependencies installation
    print_header("Dependencies")

    if prompt_yes_no("Do you want to install all dependencies now?", default=True):
        try:
            print("Installing npm dependencies...")
            subprocess.run(["npm", "install"], cwd=root_dir, check=True)
            print("✅ Dependencies installed successfully")
        except subprocess.CalledProcessError as e:
            print(f"❌ Failed to install dependencies: {e}")
            sys.exit(1)
        except FileNotFoundError:
            print("❌ 'npm' command not found. Please install Node.js.")
            sys.exit(1)

    # Summary
    print_header("Setup Complete!")
    print("Your development environment is ready!")
    print("\nNext steps:")
    print("  1. Start all services:     task dev")
    print("  2. Or start individually:")
    print(f"     - Backend API:  http://{server_host}:{server_port}")
    print(f"     - Web frontend: http://{web_host}:{web_port}")
    print(f"     - Admin panel:  http://{admin_host}:{admin_port}")
    print("\nFor more information, see README.md")


if __name__ == "__main__":
    main()
